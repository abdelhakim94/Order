@using Order.Client.Components.Layout
@using Order.Client.Constants

@namespace Order.Client.Layouts
@inherits LayoutComponentBase
@inject NavigationManager NavigationManager

<div>
    <Row CssClass=@bluredPage Justify=@justifyTopContent>

        @if (!string.IsNullOrWhiteSpace(PreviousPage))
        {
            <NavButton ImagesInSprite=1 Icon="icons/previous.png" @onclick=@(() =>
            NavigationManager.NavigateTo(PreviousPage)) />
        }

        @Top

        <NavButton Justify=@JustifyContent.CENTER DisplayHorizontal=@true Label=@NbElements.ToString()
            Icon="icons/cart-sprite.png" Selected=@CartSelected ImagesInSprite=2 Translate=@translateCartIcon
            @onclick=@(() => CartSelected = true) />

    </Row>
</div>

<CascadingValue Value=@this IsFixed=@true>
    @Body
</CascadingValue>

@code{
    private RenderFragment Top;
    public void SetTop(RenderFragment top)
    {
        Top = top;
        StateHasChanged();
    }

    public string PreviousPage { get; set; }
    private string justifyTopContent
    {
        get => Top is null && string.IsNullOrWhiteSpace(PreviousPage)
        ? JustifyContent.FLEX_END
        : JustifyContent.SPACE_BETWEEN;
    }

    private string bluredPage { get => Blured ? $"{CSSCLasses.PageBlured} cart-button" : "cart-button"; }
    private bool blured;
    public bool Blured
    {
        get => blured;
        set
        {
            blured = value;
            StateHasChanged();
        }
    }

    private int translateCartIcon { get => cartSelected ? 0 : 100; }
    private bool cartSelected;
    public bool CartSelected
    {
        get => cartSelected;
        set
        {
            if (cartSelected == value) return;
            cartSelected = value;
            if (value)
            {
                NavigationManager.NavigateTo("cart/");
            }
            StateHasChanged();
        }
    }

    public int NbElements { get; set; } = 1;
}
