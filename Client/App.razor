@using Order.Client.Components.Misc
@using Order.Client.Components
@using Order.Client.Constants
@using Order.Shared.Security.Claims

@* Read more about authentication/authorozation in blazor here: *@
@* https://docs.microsoft.com/en-us/aspnet/core/blazor/security/?view=aspnetcore-5.0#authorization *@
<CascadingAuthenticationState>
    <Router AppAssembly="@typeof(Program).Assembly" PreferExactMatches="@true">
        <Found Context="routeData">
            <Toast @ref=@Toast />
            <CascadingValue Value=@Toast IsFixed=@true>
                <Spinner @ref=@Spinner OnChange=@((isSpinning) => Blure = isSpinning) />
                <CascadingValue Value=@Spinner IsFixed=@true>
                    <div class=@classBlured>
                        <AuthorizeRouteView RouteData="@routeData">
                            <NotAuthorized>
                                @if (!(context.User.Identity.IsAuthenticated && !context.User.Claims.Any(c => c.Type ==
                                nameof(Profile) && c.Value == nameof(Profile.GUEST))))
                                {
                                <Redirect Route="SignIn/" />
                                }
                                else
                                {
                                <Redirect Route="Unauthorized/" />
                                }
                            </NotAuthorized>
                        </AuthorizeRouteView>
                    </div>
                </CascadingValue>
            </CascadingValue>
        </Found>
        <NotFound>
            <LayoutView>
                <Redirect Route="NotFound/" />
            </LayoutView>
        </NotFound>
    </Router>
</CascadingAuthenticationState>

@code{
    public Toast Toast { get; set; }
    public Spinner Spinner { get; set; }
    public bool Blure { get; set; }
    private string classBlured { get => Blure ? $"app-container {CSSCLasses.PageBlured}" : "app-container"; }
}
