@page "/home"

@using Order.Client.Services
@using Microsoft.AspNetCore.Authorization
@using Order.Shared.Security.Claims
@using Order.Shared.Security.Policies
@using Order.Client.Components.Layout

@inject NavigationManager NavigationManager
@inject IAuthenticationService AuthenticationService
@attribute [Authorize(Policy = IsGuest.Name)]

@* <p>Authenticated : @authenticated</p>
<p>@token</p>

<button type="button" @onclick=HandleLogout>Logout</button> *@

<Row>
    <button type="button" @onclick=HandleLogout>Logout</button>
    <button type="button" @onclick=HandleLogout>Logout</button>
    <button type="button" @onclick=HandleLogout>Logout</button>
</Row>

@code{
    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; }

    private string token;
    private bool authenticated;

    async Task HandleLogout()
    {
        await AuthenticationService.SignOut();
        NavigationManager.NavigateTo("SignIn/");
    }

    protected override async Task OnParametersSetAsync()
    {
        token = await GetToken();
        authenticated = await Authenticated();
    }

    async Task<string> GetToken()
    {
        return (await AuthState).User.Claims.FirstOrDefault(c => c.Type == nameof(Profile))?.Value;
    }

    async Task<bool> Authenticated()
    {
        return (await AuthState).User.Identity.IsAuthenticated;
    }
}
