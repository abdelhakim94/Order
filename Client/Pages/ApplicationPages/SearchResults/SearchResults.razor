@page "/search/results/{Search}"

@using Order.Client.Components
@using Order.Client.Components.Layout
@using Order.Client.Components.Dish
@using Order.Client.Components.Chef
@using Order.Client.Components.Form
@using Order.Client.Layouts
@using Order.Shared.Security.Policies
@using Microsoft.AspNetCore.Authorization

@namespace Order.Client.Pages
@attribute [Authorize(Policy = IsGuest.Name)]

<div>
    <LayoutSetter>
        <Top>
            <DishOrChefToggle LeftLabel=@M.Meals RightLabel=@M.Chefs Value=@searchByChefs
                ValueChanged=@HandleDishOrChefToggle />
        </Top>
    </LayoutSetter>

    <Column>
        <EditForm Model=@SearchValue>
            <OInputText CssClass="search-bar" PlaceHolder=@(searchByChefs ? M.ChefSearchBar : M.DishOrMenuSearchBar)
                RightIcon="icons/searchbar-magnifier.png" @bind-Value=@SearchValue.Value
                OnRightIconClick=@HandleSearch />
        </EditForm>
        @if (searchByChefs)
        {
            <p class="text">@M.ChefsFound(chefs?.TotalItems)</p>
            foreach (var item in chefs?.Items ?? new())
            {
                <ChefListItem @key=@item Chef=@item @onclick=@(() => NavigateToChefDetails(item)) />
            }
            if (chefs is not null && chefs.Items.Count < chefs.TotalItems)
            {
                <Scroll Text=@remaining @onclick=@SearchChefsOrDishesAndMenues />
            }
        }
        else
        {
            <p class="text">@M.DishesAndMenuesFound(dishAndMenues?.TotalItems)</p>
            foreach (var item in dishAndMenues?.Items ?? new())
            {
                <DishOrMenuListItem @key=@item DishOrMenu=@item @onclick=@(() => NavigateToDishOrMenuDetails(item)) />
            }
            if (dishAndMenues is not null && dishAndMenues.Items.Count < dishAndMenues.TotalItems)
            {
                <Scroll Text=@remaining @onclick=@SearchChefsOrDishesAndMenues />
            }
        }
    </Column>
</div>
