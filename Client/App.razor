@using Order.Client.Components.Misc
@using Order.Shared.Security.Claims

@* Read more about authentication/authorozation in blazor here: *@
@* https://docs.microsoft.com/en-us/aspnet/core/blazor/security/?view=aspnetcore-5.0#authorization *@
<CascadingAuthenticationState>
    <Router AppAssembly="@typeof(Program).Assembly" PreferExactMatches="@true">
        <Found Context="routeData">
            <NotificationModal @ref=@NotificationModal />
            <CascadingValue Value=@NotificationModal IsFixed=@true>
                <HttpErrorNotifier @ref=@HttpErrorNotifier />
                <CascadingValue Value=@HttpErrorNotifier IsFixed=@true>
                    <AuthorizeRouteView RouteData="@routeData">
                        <NotAuthorized>
                            @if (!(context.User.Identity.IsAuthenticated && !context.User.Claims.Any(c => c.Type ==
                            nameof(Profile) && c.Value == nameof(Profile.GUEST))))
                                {
                            <Redirect Route="/" />
                            }
                                else
                                {
                            <Redirect Route="/Unauthorized" />
                            }
                        </NotAuthorized>
                    </AuthorizeRouteView>
                </CascadingValue>
            </CascadingValue>
        </Found>
        <NotFound>
            <LayoutView>
                <p>Ouups! Il n'y a rien à cette adresse :(</p>
            </LayoutView>
        </NotFound>
    </Router>
</CascadingAuthenticationState>

@code{
    public NotificationModal NotificationModal { get; set; }
    public HttpErrorNotifier HttpErrorNotifier { get; set; }
}
